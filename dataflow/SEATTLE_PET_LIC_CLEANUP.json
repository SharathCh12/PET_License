{
	"name": "SEATTLE_PET_LIC_CLEANUP",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "readTSV"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Job_id as string (\"10\")",
				"}",
				"source(output(",
				"          {License Issue Date} as string,",
				"          {License Number} as string,",
				"          {Animal's Name} as string,",
				"          Species as string,",
				"          {Primary Breed} as string,",
				"          {Secondary Breed} as string,",
				"          {ZIP Code} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> readTSV",
				"readTSV derive(License_Issue_Date = toDate({License Issue Date}, 'MMMM dd yyyy'),",
				"          Secondary_Breed = iifNull({Secondary Breed}, 'Unknown'),",
				"          Job_Exec_ID = $Job_id,",
				"          Job_load_date = currentDate(),",
				"          License_Number = toInteger(translate({License Number},'S','')),",
				"          Species = upper(Species),",
				"          Animals_Name = translate({Animal's Name}, '()[]',''),",
				"          Zip_Code = lpad(toString({ZIP Code}), 5,'0')) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          Species,",
				"          {Primary Breed},",
				"          Secondary_Breed,",
				"          License_Issue_Date,",
				"          Job_Exec_ID,",
				"          Job_load_date,",
				"          License_Number,",
				"          Animals_Name,",
				"          Zip_Code",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          SPECIES = Species,",
				"          PRIMARY_BREED = {Primary Breed},",
				"          SECONDARY_BREED = Secondary_Breed,",
				"          LICENSE_ISSUE_DATE = License_Issue_Date,",
				"          JOB_EXEC_ID = Job_Exec_ID,",
				"          JOB_LOAD_DATE = Job_load_date,",
				"          LICENSE_NUMBER = License_Number,",
				"          ANIMALS_NAME = Animals_Name,",
				"          ZIP_CODE = Zip_Code",
				"     )) ~> sink1"
			]
		}
	}
}